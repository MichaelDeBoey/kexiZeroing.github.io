---
import PlaygroundLayout from '@/layouts/PlaygroundLayout.astro';
---

<PlaygroundLayout title="Unstorage Browser Demo">
  <div class="demo-container">
    <h1 class="demo-title">Unstorage Browser Demo</h1>
  
    <div class="card">
      <p><strong>Storage Drivers Available:</strong></p>
      <ul>
        <li><strong>Memory Driver</strong> <span class="badge volatile">volatile</span> - Stores data in-memory (RAM). Data will be lost when you refresh the page.</li>
        <li><strong>Browser Driver</strong> <span class="badge persistent">persistent</span> - Uses browser localStorage. Data persists across page refreshes.</li>
      </ul>
      <p>Try setting, getting, and removing key-value pairs using the controls below.</p>
    </div>
  
    <div class="driver-select">
      <label for="driverSelector">Select Storage Driver:</label>
      <select id="driverSelector">
        <option value="memory">Memory Storage (volatile)</option>
        <option value="browser">Browser Storage (persistent)</option>
      </select>
    </div>
  
    <div class="control-panel">
      <div>
        <div class="input-group">
          <label for="keyInput">Key:</label>
          <input type="text" id="keyInput" placeholder="Enter key (e.g., user:3)">
        </div>
        
        <div class="input-group">
          <label for="valueInput">Value:</label>
          <input type="text" id="valueInput" placeholder="Enter value">
        </div>
        
        <div class="actions">
          <button id="setBtn">Set Item</button>
          <button id="getBtn">Get Item</button>
          <button id="removeBtn">Remove Item</button>
          <button id="keysBtn">List All Keys</button>
          <button id="clearAllBtn">Clear All Items</button>
        </div>
      </div>
      
      <div>
        <label for="output">Output:</label>
        <textarea id="output" readonly></textarea>
        <button id="clearOutput">Clear Output</button>
      </div>
    </div>
  </div>
</PlaygroundLayout>

<style>
  .demo-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
  }
  .demo-title {
    border-bottom: 2px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 24px;
    font-size: 24px;
    font-weight: bold;
  }
  .control-panel {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
  }
  .input-group {
    margin-bottom: 10px;
  }
  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }
  input[type="text"], select {
    width: 100%;
    padding: 8px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  .actions {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
  }
  button {
    padding: 8px 16px;
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }
  button:hover {
    background-color: #3a80d2;
  }
  #clearOutput {
    background-color: #999;
  }
  #clearOutput:hover {
    background-color: #777;
  }
  textarea {
    width: 100%;
    height: 300px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #f9f9f9;
    font-size: 14px;
  }
  .card {
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  .driver-select {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f5f5f5;
    border-radius: 6px;
  }
  @media (max-width: 768px) {
    .control-panel {
      grid-template-columns: 1fr;
    }
  }
  .badge {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: bold;
    margin-left: 8px;
    vertical-align: middle;
  }
  .badge.volatile {
    background-color: #ffeb3b;
    color: #333;
  }
  .badge.persistent {
    background-color: #4caf50;
    color: white;
  }
</style>

<script is:inline type="module">
  import { createStorage } from 'https://esm.sh/unstorage';
  import memoryDriver from 'https://esm.sh/unstorage/drivers/memory';
  import localStorageDriver from 'https://esm.sh/unstorage/drivers/localstorage';

  document.addEventListener('DOMContentLoaded', async () => {
    const memoryStorage = createStorage({
      driver: memoryDriver()
    });
    
    const browserStorage = createStorage({
      driver: localStorageDriver({ base: 'unstorage-demo' })
    });

    let currentStorage = memoryStorage;
    let currentStorageType = 'memory';

    // DOM Elements
    const keyInput = document.getElementById('keyInput');
    const valueInput = document.getElementById('valueInput');
    const setBtn = document.getElementById('setBtn');
    const getBtn = document.getElementById('getBtn');
    const removeBtn = document.getElementById('removeBtn');
    const keysBtn = document.getElementById('keysBtn');
    const outputArea = document.getElementById('output');
    const clearOutputBtn = document.getElementById('clearOutput');
    const driverSelector = document.getElementById('driverSelector');
    const clearAllBtn = document.getElementById('clearAllBtn');

    function log(message) {
      outputArea.value += `${message}\n`;
      outputArea.scrollTop = outputArea.scrollHeight;
    }

    driverSelector.addEventListener('change', async () => {
      const selectedDriver = driverSelector.value;
      if (selectedDriver === 'memory') {
        currentStorage = memoryStorage;
        currentStorageType = 'memory';
        log('üì¶ Switched to Memory Storage (volatile)');
      } else if (selectedDriver === 'browser') {
        currentStorage = browserStorage;
        currentStorageType = 'browser';
        log('üíæ Switched to Browser Storage (persistent)');
      }
      // List keys in the newly selected storage
      await listKeys();
    });

    // Set key-value pair
    setBtn.addEventListener('click', async () => {
      const key = keyInput.value.trim();
      const value = valueInput.value;
      
      if (!key) {
        log('‚ùå Error: Key cannot be empty');
        return;
      }

      try {
        await currentStorage.setItem(key, value);
        log(`‚úÖ Set: "${key}" = "${value}" (${currentStorageType})`);
      } catch (error) {
        log(`‚ùå Error setting item: ${error.message}`);
      }
    });

    // Get value by key
    getBtn.addEventListener('click', async () => {
      const key = keyInput.value.trim();
      
      if (!key) {
        log('‚ùå Error: Key cannot be empty');
        return;
      }

      try {
        const value = await currentStorage.getItem(key);
        if (value === null) {
          log(`‚ÑπÔ∏è Key "${key}" not found in ${currentStorageType} storage`);
        } else {
          log(`üîç Get: "${key}" = "${value}" (${currentStorageType})`);
        }
      } catch (error) {
        log(`‚ùå Error getting item: ${error.message}`);
      }
    });

    // Remove key
    removeBtn.addEventListener('click', async () => {
      const key = keyInput.value.trim();
      
      if (!key) {
        log('‚ùå Error: Key cannot be empty');
        return;
      }

      try {
        await currentStorage.removeItem(key);
        log(`üóëÔ∏è Removed: "${key}" (${currentStorageType})`);
      } catch (error) {
        log(`‚ùå Error removing item: ${error.message}`);
      }
    });

    // List all keys
    async function listKeys() {
      try {
        const keys = await currentStorage.getKeys();
        if (keys.length === 0) {
          log(`‚ÑπÔ∏è ${currentStorageType.charAt(0).toUpperCase() + currentStorageType.slice(1)} storage is empty`);
        } else {
          log(`üîë Keys in ${currentStorageType} storage:`);
          keys.forEach(key => log(`  - ${key}`));
        }
      } catch (error) {
        log(`‚ùå Error listing keys: ${error.message}`);
      }
    }
    
    keysBtn.addEventListener('click', listKeys);

    // Clear all items in current storage
    clearAllBtn.addEventListener('click', async () => {
      try {
        const keys = await currentStorage.getKeys();
        for (const key of keys) {
          await currentStorage.removeItem(key);
        }
        log(`üßπ Cleared all items from ${currentStorageType} storage`);
      } catch (error) {
        log(`‚ùå Error clearing storage: ${error.message}`);
      }
    });

    // Clear output
    clearOutputBtn.addEventListener('click', () => {
      outputArea.value = '';
    });

    // Set some initial data for demo purposes
    await memoryStorage.setItem('user1', 'John Doe');
    await memoryStorage.setItem('user2', 'Jane Smith');
    
    const browserKeys = await browserStorage.getKeys();
    if (browserKeys.length === 0) {
      await browserStorage.setItem('persistent1', 'Hello from browser storage');
    }

    log('üëã Unstorage Demo Ready!');
    log('‚ÑπÔ∏è Initial data loaded in memory storage.');
    log('üí° Tip: Switch to Browser storage to see persistent data that survives page refreshes.');
    log('Try listing the keys to see available data.');
  });
</script>